; Simple test - config file
; Should be used with orx v.1.5+


; --- Config includes ---

; Including the spritesheet config data that was generated by the awesome TexturePacker, courtesy of Andreas LÃ¶w,
; from the non-less awesome art made by danc of www.lostgarden.com.
@spritesheet.ini@

; Overriding some pivot of "sprites" defined in spritesheet.ini
[Tree Short]
Pivot           = center

[Tree Tall]
Pivot           = center

[Tree Ugly]
Pivot           = center

[Chest Closed]
Pivot           = center

[Gem Blue]
Pivot           = center

[Star]
Pivot           = center


; --- Viewports and cameras ---

[Viewport]
Camera          = Camera

[Camera]
FrustumWidth    = 1280
FrustumHeight   = 800
FrustumFar      = 2
Position        = (0, 0, -1)


; --- Objects ---

[Test]
RandomList      = Spiral # Chest # Gem                    ; List of objects that will get created randomly upon user interaction.
LifeTime        = 5                                       ; LifeTime for randomly created objects.

; Scene is the only object that is directly referenced in code.
; No direct interaction is made in code with it either: the code simply creates it and forgets about it.
; The only interaction made in code will be creating a random object (from the RandomList defined above) under the mouse cursor when the input "Action" is activated.
[Scene]
ChildList       = Background #                            ; Background surface (a mere pretext for having a shader in background).
                  Music #                                 ; Music object, serves as a simple container for a music stream.
                  Cursor #                                ; Replacing the mouse cursor with this object, its behavior is defined in config, not in code.
                  CompileGemShader                        ; Fake object used to trigger shader compilation at the beginning and prevent any hiccup later on.

[Background]
Graphic         = @                                       ; @ is a special identifier that is replaced by the name of the current section. Kinda similar to a "self" keyword.
Texture         = @spritesheet                            ; Using the full texture generated by TexturePacker, defined in spritesheet.ini.
Pivot           = center                                  ; Centering the graphic's pivot (aka. hotspot).
ParentCamera    = Camera                                  ; Setting Camera as parent.
Scale           = 1                                       ; Scaling the object to match the parent's dimensions (here, Camera).
Position        = (0, 0, 1)                               ; Pushing the object in the background (to the far plane of Camera's frustum).
Color           = (100, 100, 164)                         ; Teint to apply on the object.
; Here's a simple shader using polar coordinates to display textured wormhole.
ShaderList      = @
Code            = "
void main()
{
  float a, r;
  vec2  vUV, vPos;
  vec4  vPixel;

  vPos          = -1.0 + 2.0 * gl_TexCoord[0].xy;

  r             = sqrt(dot(vPos, vPos));
  a             = atan(vPos.y, vPos.x) + 0.75 * sin(1.5 * r - 0.5 * fTime);

  vUV.x         = mod(fTime + 1.0/r, 1.0);
  vUV.y         = mod(3.0 * a / 3.1416, 1.0);

  vPixel        = texture2D(Texture, vUV);

  gl_FragColor  = vec4(vPixel.rgb * vec3(r * r * r), vPixel.a);
}
"
ParamList       = Texture # fTime;                        ; List of external parameters sent to the shader, as we don't define "Texture" below, the object's own texture will be used.
fTime           = time                                    ; "time" is a keyword recognized by orx: the parameter value will be the object's "age", in seconds.

[Music]
SoundList       = Alpha                                   ; No visual for this object: it only contains a sound component, named Alpha.

[Cursor]
Spawner         = @                                       ; No visual for this object either: it only contains a spawner component.
Object          = Particle                                ; Particle is the name of the object that this spawner will create.
WaveSize        = 2                                       ; 2 Particles will be created in each wave.
WaveDelay       = 0.01                                    ; A new wave is started every 0.01 seconds => 2 * 1/0.01 ~ up to 200 Particles created per second.
TrackList       = CursorTrack                             ; This track is actually responsible for moving it "under" the mouse cursor.

[Particle]
Graphic         = Star                                    ; Particles spawned under the cursor are Stars from the spritesheet.
AngularVelocity = -90 ~ 90                                ; This object will rotate with an angular velocity randomly chosen between -90 degrees/s and +90 degrees/s.
Position        = (-15, -15, 0) ~ (15, 15, 0)             ; Adding some random offset to its position so that all the Particles are not created exactly at the same place.
Scale           = 0.1                                     ; Scaling this object down to 1/10th of its original size.
LifeTime        = 0.8                                     ; This object will be deleted after 0.8 seconds.
FXList          = @                                       ; Adding an FX component as well.
SlotList        = ParticleShrinkFX                        ; And they shrink over time.

[Spiral@Test]                                             ; Inheriting from Test section for the LifeTime property.
Spawner         = @
AngularVelocity = 1440 # -1440
WaveSize        = 5
WaveDelay       = 0.01
Object          = SpiralTree1 # SpiralTree2 # SpiralTree3
UseScale        = false
FXList          = @
SlotList        = EnlargeFX

[SpiralTree1@Particle]
Graphic         = Tree Short
Scale           = 0.5
Position        = (0.5, 0, 0) ~ (1, 0.5, 0)

[SpiralTree2@SpiralTree1]
Graphic         = Tree Tall

[SpiralTree3@SpiralTree1]
Graphic         = Tree Ugly

[Chest@Test]                                              ; Inheriting from Test section for LifeTime property.
Graphic         = Chest Closed
Position        = (-350, -150, 0.5)
FXList          = @
SlotList        = FadeOutFX # FlipFX

[Gem@Test]                                                ; Inheriting from Test section for LifeTime property.
Graphic         = Gem Blue
Position        = (-45, -150, 0.5)
FXList          = @
SlotList        = ShrinkFX
; Here's another simple shader using polar coordinates to display a "rotating" checkered tube on top a greyed gem.
ShaderList      = @
Code            = "
void main()
{
  float a, r, f;
  vec4  vColor, vBW;
  vec3  vCoef   = vec3(0.299, 0.587, 0.114);
  vec2  vTL     = vec2(texture_left, texture_top);
  vec2  vBR     = vec2(texture_right, texture_bottom);
  vec2  vPos    = -1.0 + 2.0 * (gl_TexCoord[0].xy - vTL) / (vBR - vTL);

  vColor        = texture2D(texture, gl_TexCoord[0].xy);
  vBW           = vec4(vec3(smoothstep(0.3, 0.6, dot(vColor.rgb * vCoef, vec3(1.0, 1.0, 1.0)))), vColor.a);

  a             = atan(vPos.y, vPos.x);
  a            += sin(r + time);
  r             = sqrt(dot(vPos, vPos));
  f             = sin(20.0 * r + 10.0 * sin(1.5 * time));
  f            *= sin(10.0 * a + 10.0 * sin(time));
  f             = smoothstep(-0.5, 0.5, f);

  gl_FragColor  = mix(vColor, vBW, f);}
"
ParamList       = texture # time
time            = time

[CompileGemShader]                                        ; This object will simply trigger the compilation of the shader defined in Gem and get deleted immediately after.
ShaderList      = Gem
LifeTime        = 0


; --- Musics (streams) & Sounds (samples) ---

[Alpha]
Music           = alpha.ogg                               ; A short music loop, composed by Mochi, being streamed.
Loop            = 1

[Thump]                                                   ; A sound effect by qubodup, found on opengameart.org, loaded as a sample.
Sound           = jumpland.ogg
Pitch           = 0.8 ~ 1.5

[Boink]                                                   ; Another sound effect by qubodup, also found on opengameart.org, loaded as a sample.
Sound           = jump.ogg
Pitch           = 0.9 ~ 1.2


; --- FXs ---

; Here are some FXs whose names are (hopefully) self explanatory.
[ShrinkFX]
Type            = scale
Curve           = linear
StartTime       = 0
EndTime         = @Test.LifeTime
StartValue      = 1
EndValue        = 0.01

[EnlargeFX@ShrinkFX]
EndValue        = 250

[ParticleShrinkFX@ShrinkFX]
EndTime         = @Particle.LifeTime

[FadeOutFX]
Type            = alpha
Curve           = linear
StartTime       = 0
EndTime         = @Test.LifeTime
StartValue      = 0
EndValue        = -1

[FlipFX]
Type            = scale
Curve           = sine
Period          = 2
StartTime       = 0
EndTime         = @Test.LifeTime
StartValue      = (1, 1, 1)
EndValue        = (1, -1, 1)


; --- Tracks ---

[CursorTrack]                                             ; This track is responsible for moving the owner object "under" the mouse cursor.
0               = > Mouse.GetPosition                   # ; Gets mouse's cursor position (screen space) and pushes it on the stack.
                  > Render.GetWorldPosition <           # ; Pops it from the stack, gets its value in world space and then pushes it on the stack.
                  > + < (0,0,0.01)                      # ; Pops it, adds a slight offset on Z to make sure it'll be in camera's frustum and pushes it.
                    Object.SetPosition ^ <                ; Pops the final position and updates the owner object with it.
Loop            = True                                    ; Let's do that again next frame!
